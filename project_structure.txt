
=== /Users/micaelsantana/Documents/app-backend/docker/nginx/default.conf ===

server {
    listen 80;
    server_name api.micasan.com.br;

    # Local onde o Certbot salvará os desafios ACME para renovação do SSL
    location /.well-known/acme-challenge/ {
        root /var/www/letsencrypt;
        allow all;
    }

    # Redireciona todo o tráfego HTTP para HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name api.micasan.com.br;

    # Certificados SSL do Let's Encrypt
    ssl_certificate /etc/letsencrypt/live/api.micasan.com.br/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.micasan.com.br/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Configuração de logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    root /var/www/html/public;
    index index.php index.html;

    # Configuração para rodar Laravel no Nginx
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Suporte a PHP-FPM via TCP
    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass app:9000;  # Conecta ao serviço "app" na porta 9000
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }

    # Otimização de cache para arquivos estáticos
    location ~* \.(ico|css|js|gif|jpe?g|png|woff2?|eot|ttf|svg|otf)$ {
        expires 6M;
        access_log off;
        add_header Cache-Control "public";
    }

    # Proteção contra acesso a diretórios sensíveis
    location ~ /\.ht {
        deny all;
    }
}

=== /Users/micaelsantana/Documents/app-backend/docker/nginx/supervisord.conf ===

[supervisord]
nodaemon=true

[program:php-fpm]
command=/usr/local/sbin/php-fpm
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:nginx]
command=/usr/sbin/nginx -g "daemon off;"
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

=== /Users/micaelsantana/Documents/app-backend/docker-compose.yml ===

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: laravel_app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
      - /var/www/html/vendor
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "php", "-v"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - laravel_network

  nginx:
    image: nginx:alpine
    container_name: nginx_server
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - .:/var/www/html
      - /var/www/html/vendor
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt           # Montar certificados SSL no container
      - /var/lib/letsencrypt:/var/lib/letsencrypt
      - ./certbot-www:/var/www/letsencrypt
    depends_on:
      - app
    networks:
      - laravel_network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/lib/letsencrypt:/var/lib/letsencrypt
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./certbot-www:/var/www/letsencrypt
    depends_on:
      - nginx
    entrypoint: >
      /bin/sh -c 'trap exit TERM;
      while :;
      do certbot renew --webroot -w /var/www/letsencrypt --quiet;
      sleep 12h & wait $${!};
      done'

networks:
  laravel_network:
    driver: bridge

=== /Users/micaelsantana/Documents/app-backend/Dockerfile ===

# Use PHP 8.2 FPM base image
FROM php:8.2.4-fpm

# Set working directory
WORKDIR /var/www/html

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    libpq-dev \
    supervisor \
    certbot \
    libfreetype6-dev \
    libjpeg62-turbo-dev \
    libwebp-dev \
    libxpm-dev \
    zlib1g-dev \
    libzip-dev \
    dnsutils \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Node.js and npm (versão 18.x)
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g npm@10

# Configure and install PHP extensions (GD, pdo_pgsql, etc.)
RUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp --with-xpm \
    && docker-php-ext-install gd pdo pdo_pgsql mbstring exif pcntl bcmath zip

# Configure PHP-FPM para escutar via TCP na porta 9000
# (Substitui a configuração padrão que usa Unix socket)
RUN sed -i "s|^listen =.*|listen = 9000|" /usr/local/etc/php-fpm.d/www.conf \
    && sed -i "s|^;listen.owner.*|listen.owner = www-data|" /usr/local/etc/php-fpm.d/www.conf \
    && sed -i "s|^;listen.group.*|listen.group = www-data|" /usr/local/etc/php-fpm.d/www.conf \
    && sed -i "s|^;listen.mode.*|listen.mode = 0660|" /usr/local/etc/php-fpm.d/www.conf

# Install Composer (copiado da imagem oficial composer)
COPY --from=composer:2.5.4 /usr/bin/composer /usr/bin/composer

# Create necessary directories with proper permissions
RUN mkdir -p /var/www/html/storage/framework/sessions \
    /var/www/html/storage/framework/views \
    /var/www/html/storage/framework/cache \
    /var/www/html/bootstrap/cache \
    /var/www/html/deploy \
    /var/www/letsencrypt \
    /certbot-www \
    && chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache /var/www/letsencrypt /certbot-www \
    && chown -R www-data:www-data /var/www/html /var/www/letsencrypt /certbot-www

# Set environment variable to allow Composer to run as root
ENV COMPOSER_ALLOW_SUPERUSER=1

# Copy all application files
COPY . .

# Create an .env file if it doesn't exist
RUN test -f .env || cp .env.example .env

# Install Composer dependencies with proper permissions
RUN composer install --optimize-autoloader --no-dev --no-scripts \
    && php artisan key:generate --force \
    && chown -R www-data:www-data /var/www/html/vendor

# Ensure migrate.sh has execute permissions, if it exists
RUN if [ -f /var/www/html/deploy/migrate.sh ]; then \
    chmod +x /var/www/html/deploy/migrate.sh; \
    chown www-data:www-data /var/www/html/deploy/migrate.sh; \
fi

# Supervisor configuration (opcional – se quiser usar Supervisor para gerenciar processos no contêiner)
RUN echo "[supervisord]\n\
nodaemon=true\n\
user=root\n\
[program:php-fpm]\n\
command=/usr/local/sbin/php-fpm --nodaemonize\n\
autostart=true\n\
autorestart=true\n\
stdout_logfile=/dev/stdout\n\
stdout_logfile_maxbytes=0\n\
stderr_logfile=/dev/stderr\n\
stderr_logfile_maxbytes=0" > /etc/supervisor/conf.d/supervisord.conf

# Script de inicialização do container (start-container)
RUN echo '#!/bin/bash\n\
# Executar as migrations do Laravel se houver\n\
if [ -x /var/www/html/deploy/migrate.sh ]; then\n\
    echo "Executando script de migração..."\n\
    bash /var/www/html/deploy/migrate.sh\n\
else\n\
    echo "Rodando Laravel migrations..."\n\
    cd /var/www/html && php artisan migrate --force\n\
fi\n\
\n\
# Iniciar o PHP-FPM em primeiro plano\n\
exec php-fpm --nodaemonize' > /usr/local/bin/start-container \
    && chmod +x /usr/local/bin/start-container

# Expose porta 9000 para PHP-FPM (usada internamente)
EXPOSE 9000

# Start the container
CMD ["/usr/local/bin/start-container"]

=== /Users/micaelsantana/Documents/app-backend/deploy.sh ===

#!/bin/bash

set -e  # Sair se ocorrer qualquer erro

echo "🚀 Starting Deployment Process"

# 1) Garantir que o repositório existe
if [ ! -d "/var/www/app-backend" ]; then
    echo "🔄 Cloning repository..."
    git clone git@github.com:douglashub/app-backend.git /var/www/app-backend
fi

cd /var/www/app-backend || exit 1

echo "🔄 Pulling Latest Code..."
git fetch origin main
git reset --hard origin/main
git pull --rebase origin main

echo "🔍 Checking Docker Installation..."
if ! command -v docker &> /dev/null; then
    echo "🚨 Installing Docker..."
    apt update && apt install -y docker.io
    systemctl start docker
    systemctl enable docker
fi

echo "🔍 Checking Docker Compose Installation..."
if ! command -v docker-compose &> /dev/null; then
    echo "🚨 Installing Docker Compose..."
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
         -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
fi

echo "📝 Setting Up Environment Variables..."
if [ ! -f ".env" ]; then
    cp .env.example .env
fi

# Ajusta as variáveis de ambiente do Laravel
sed -i "s|DB_HOST=.*|DB_HOST=db-postgres-api-micasan-do-user-20111967-0.f.db.ondigitalocean.com|" .env
sed -i "s|DB_PORT=.*|DB_PORT=25060|" .env
sed -i "s|DB_DATABASE=.*|DB_DATABASE=defaultdb|" .env
sed -i "s|DB_USERNAME=.*|DB_USERNAME=doadmin|" .env
sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=AVNS_UnYjI2qmb8fsv0PgrYN|" .env

# A configuração do PHP-FPM já foi definida no Dockerfile (listen = 9000 via TCP)
echo "✅ Using Dockerfile configuration for PHP-FPM (listen = 9000)"

echo "🐳 Stopping and Removing Old Containers..."
docker-compose down --rmi all --volumes --remove-orphans
docker system prune -af
docker volume prune -f

echo "🐳 Building and Restarting Docker Containers..."
docker-compose build --no-cache
docker-compose up -d --force-recreate --build

echo "🔄 Checking PostgreSQL Connection..."
DB_HOST="db-postgres-api-micasan-do-user-20111967-0.f.db.ondigitalocean.com"
DB_PORT="25060"
MAX_ATTEMPTS=10
ATTEMPT=1

while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
    echo "  -> Attempt $ATTEMPT of $MAX_ATTEMPTS"
    if nc -zvw3 "$DB_HOST" "$DB_PORT"; then
        echo "✅ PostgreSQL is accessible!"
        break
    fi
    ATTEMPT=$((ATTEMPT+1))
    sleep 5
done

if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
    echo "❌ Could not connect to PostgreSQL after $MAX_ATTEMPTS attempts."
    exit 1
fi

echo "⏳ Waiting for containers to be fully up..."
sleep 15

echo "🔄 Clearing Laravel caches..."
docker-compose exec -T app php artisan config:clear
docker-compose exec -T app php artisan cache:clear
docker-compose exec -T app php artisan config:cache

echo "📦 Installing Composer dependencies..."
docker-compose exec -T app composer install --no-dev --optimize-autoloader

echo "⚡ Running npm install & build..."
docker-compose exec -T app bash -c "npm install && npm run build"

echo "📊 Running migrations..."
docker-compose exec -T app php artisan migrate --force

echo "🔄 Restarting Nginx..."
docker-compose restart nginx
sleep 5

echo "🔍 Testing HTTPS access..."
if curl -sk --head https://api.micasan.com.br | grep -q '200 OK'; then
    echo "✅ Application is accessible!"
else
    echo "❌ Application is not accessible. Nginx logs below:"
    docker-compose logs --tail=50 nginx
fi

echo "✅ Deployment Completed Successfully!"
